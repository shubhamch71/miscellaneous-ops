##############################
# Stage 1: Build dependencies
##############################
FROM python:3.10-slim AS builder

# Set environment variables for Python
# Prevents Python from writing .pyc files and enables unbuffered logs (good for Docker logging)
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Install build dependencies (compilers, headers) â€” will be discarded later
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential gcc \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy only requirements first (caching optimization)
COPY requirements.txt .

# Install dependencies into a separate directory
# Using --prefix allows us to copy only site-packages later
RUN pip install --no-cache-dir --prefix=/install -r requirements.txt


##############################
# Stage 2: Runtime container
##############################
FROM python:3.10-slim

# Create a non-root user for security
RUN useradd -m appuser

WORKDIR /app

# Copy installed Python packages from builder stage
COPY --from=builder /install /usr/local

# Copy application source code
COPY . .

# Change ownership to non-root user
RUN chown -R appuser:appuser /app

USER appuser

# Expose Flask default port
EXPOSE 5000

# Run gunicorn (production-grade WSGI server) instead of Flask dev server
# -w: number of workers, -b: bind address
CMD ["gunicorn", "--workers=4", "--bind=0.0.0.0:5000", "app:app"]
